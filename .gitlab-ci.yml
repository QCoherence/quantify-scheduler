workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "push"'

.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.7

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V  # Print out python version for debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - apt update
  - sleep 3

stages:
  - Static Analysis
  - Test
  - Docs build
  - Deploy

.unix-script:
  # windows script is different
  script:
    - pip install -e .
    - pip install -r requirements_dev.txt
    - py.test -n 2 --mpl --mpl-baseline-path=tests/baseline_images -s --cov=quantify --cov-report xml --cov-report html --cov-report term --cov-config=.coveragerc --color=yes
    # send the coverage.xml file to codacy
    - bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml

.test:
  needs: []  # allow running in parallel with previous stage
  artifacts:
    paths:
      - htmlcov
      - coverage.xml
    reports:
      cobertura: coverage.xml
    when: always

.develop-only-job:
  # make any job extend from this if it should run only on develop
  rules:
    # Only run when merging to develop branch
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
    - if: '$CI_COMMIT_BRANCH == "develop"'  # Also run for direct commits on develop

.nightly-only-job:
  # intended for very slow tests
  rules:
    # this variable is set in the Gitlab -> CI/CD -> Schedules
    - if: '$CI_NIGHTLY_JOB == "True"'

test-3.7:
  stage: Test
  image: "python:3.7"
  extends:
    - .unix-script
    - .test
    - .develop-only-job

test-3.8:
  stage: Test
  image: "python:3.8"
  extends:
    - .unix-script
    - .test

test-win-3.8:
  stage: Test
  before_script:
    - choco install python --version=3.8.3 -y -f
    - "C:\\Python38\\python.exe -m pip install -U pip"
  extends:
    - .shared_windows_runners
    - .test
    - .develop-only-job
  script:
    - "C:\\Python38\\python.exe -m pip install -r requirements_dev.txt"
    - "C:\\Python38\\python.exe -m pip install -e ."
    - "C:\\Python38\\Scripts\\py.test.exe -n 2 --mpl --mpl-baseline-path=tests/baseline_images -s --cov=quantify --cov-report xml --cov-report html --cov-report term --cov-config=.coveragerc --color=yes"

test-latest:
  stage: Test
  image: "python:latest"
  extends:
    - .unix-script
    - .test
    - .develop-only-job
  allow_failure: true

alternative-install:
  stage: Test
  extends: ".develop-only-job"
  needs: []  # allow running in parallel with previous stage
  script:
    - python setup.py bdist_wheel
    # an alternative approach is to install and run:
    - pip install dist/*
    # run the command here
  artifacts:
    paths:
      - dist/*.whl

docs-make-html-3.8:
  needs: []  # allow running in parallel with previous stage
  stage: Docs build
  image: "python:3.8"
  script:
    - pip install --upgrade --upgrade-strategy eager -e .
    - pip install --upgrade --upgrade-strategy eager -r requirements_dev.txt
    - cd docs; make html
  extends:
    - .develop-only-job

docs-make-html-win-3.8:
  needs: []  # allow running in parallel with previous stage
  stage: Docs build
  before_script:
    - choco install python --version=3.8.3 -y -f
    - "C:\\Python38\\python.exe -m pip install -U pip"
  extends:
    - .shared_windows_runners
    # - .nightly-only-job
    - .develop-only-job  # temporary testing
  script:
    - "C:\\Python38\\python.exe -m pip install --upgrade --upgrade-strategy eager -e ."
    - "C:\\Python38\\python.exe -m pip install --upgrade --upgrade-strategy eager -r requirements_dev.txt"
    - "set SPHINXBUILD=C:\\Python38\\python.exe -msphinx"  # point to sphinx-build executable
    - "cd docs; ./make.bat html"

black:
  stage: Static Analysis
  image: python:3.8
  allow_failure: false
  script:
    - pip install -r requirements_dev.txt
    - black --check --fast .
