====================
Compilation backends
====================


.. note::

    This functionality is intended to replace the existing compilation based on the :func:`~.qcompile` function and is still under active development.


Using a compilation backend
===========================

In order to execute a :class:`~.Schedule` on physical hardware or a simulator one needs to compile the schedule. This is done using a :class:`~.backends.graph_compilation.CompilationBackend`. The :meth:`~.backends.graph_compilation.CompilationBackend.compile` method requires both the :class:`~.Schedule` to compile and a configuration describing the information required to perform the compilation.

Because the information required to










(basic user)

User flow -> give a Schedule and  Quantum device as input.
User creates a schedule of the experiment they want to perform.
Provides a Schedule and a quantum device as input.
The compilation configuration is generated by the quantum device.
The backend compiles the schedule into a CompiledSchedule suitable for execution by the InstrumentCoordinator that can then execute the Schedule and return a Dataset.

Current option -> modify ScheduleGettable to select either of the two compilation modes (based on a parameter in the QuantumDevice).
Wrap the existing configs.




Understanding the structure of compilation
==========================================

Compilation is done as a graph.
This makes it really easy to show what steps

special debugging mode where the output at the end of every node is saved (default is False).
When compilation fails, the traceback should show in which node it fails.
Easy way to visualize the node.

Easy way to see which part of the config is used for which node.


Creating a custom compilation backend
=====================================

(advanced user/basic developer)

Here we describe the internals for developers who want to add a custom node or parts of the config that are different.

Selection mechanism for what backend is used/instantiated to compile with.
(change this to your custom backend).
Emphasize modularity and testing on how to develop a custom backend.



Understanding the structure of compilation.
It is a graph.
Different parts of the config are used in different nodes.
Show an example of a graph.


Future ideas
============

Explain the idea of the graph.
Where does the config come from?
What steps does it take?
Showing the steps in the backend to understand what happens in the compilation.


Backend internals